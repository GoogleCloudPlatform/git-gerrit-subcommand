#!/usr/bin/env sh
# Copyright 2022 Google LLC
# Author: Jun Sheng
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This is the  git-gerrit tool.
#
set -o errexit
set -o nounset
usage () {
  cat <<EOF
git gerrit [start-work|submit]

The following configs are used:
   gerrit.remoteName
     The name of the remote pointing to the gerrit server, default is 'gerrit'.
     You can set this config by running:
         git config --add gerrit.remoteName  my-gerrit-remote

   gerrit.remoteRef
     The ref which review will happen, default is 'refs/for/main'.
     You can set this config by running:
         git config --add gerrit.remoteRef  refs/for/main

   gerrit.defaultBranch
     The branch which approved changesets will merge into, default is the right most part of your gerrit.remoteRef splitted by "/", 
     for instance, if your gerrit.remoteRef is 'refs/for/main', then gerrit.defaultBranch defaults to 'main'
     You can set this config by running:
         git config --add gerrit.defaultBranch  main

EOF
  exit 1
}

GERRIT_REMOTE="$(git config --get --default gerrit gerrit.remoteName)"
GERRIT_REMOTEREF="$(git config --get --default refs/for/main gerrit.remoteRef)"
GERRIT_DEFAULTBRANCH="$(git config --get --default "${GERRIT_REMOTEREF##*/}" gerrit.defaultBranch)"

startwork() {
  BRANCH=$(git branch --show-current)
  if ! [ "$BRANCH" = "$GERRIT_DEFAULTBRANCH" ]
  then
    echo "Not in the default branch '$GERRIT_DEFAULTBRANCH'"
    exit 1
  fi
  ID=I$(dd if=/dev/urandom count=1 2>/dev/null|git hash-object --stdin)
  if git rev-list -n 1 "$GERRIT_DEFAULTBRANCH" 2>/dev/null
  then
    git checkout -b $ID
  else
    git checkout --orphan $ID
  fi
}
presubmitcheck() {
  ID=$1
  if ! (echo $ID|grep -q '^I[0-9a-f]\{40\}$')
  then
    echo "Not in gerrit working branch" >&2
    return 1
  fi
  if ! (output=$(git status --untracked-files=no --porcelain) && [ -z "$output" ])
  then
    echo "Workspace not clean, commit changes(or stash them) then submit" >&2
    return 1
  fi
  if git log --format=%B -n 1 HEAD|grep -q Change-Id
  then
    echo "Seems workspace has already been submitted" >&2
    return 1
  fi
}
resume_submitcheck() {
  ID=$1
  if ! (echo $ID|grep -q '^I[0-9a-f]\{40\}\.submit$')
  then
    return 1
  fi
  echo "Resume submitting..."
}
submitwork() {
  ID=$(git branch --show-current)
  if presubmitcheck "$ID"
  then
    WORKCOMMIT="$(git log --format=%H --grep "^Change-Id: $ID" -n 1)"
    if [ -z $WORKCOMMIT ]
    then
      git commit --trailer="" --trailer="#Input you commit message for submission above" --trailer="Change-Id: $ID"  --allow-empty
    else
      git commit -C "$WORKCOMMIT" --allow-empty
    fi
    if git rev-list -n 1 "${GERRIT_DEFAULTBRANCH}" 2>/dev/null
    then
      git checkout "${GERRIT_DEFAULTBRANCH}"
      git checkout -b ${ID}.submit
      git merge --squash $ID
    else
      git checkout --orphan ${ID}.submit
    fi
    if git commit -C $ID
    then
      git push "${GERRIT_REMOTE}" ${ID}.submit:"${GERRIT_REMOTEREF}"
    fi
    git checkout ${ID}
    git branch -D ${ID}.submit
  elif resume_submitcheck "$ID"
  then
    git push "${GERRIT_REMOTE}" ${ID}:"${GERRIT_REMOTEREF}"
    git checkout ${ID/.submit/}
    git branch -D $ID
  fi
}

case ${1:-help} in
  start-work)
    startwork
    ;;
  submit)
    submitwork
    ;;
  *)
    usage
    ;;
esac
