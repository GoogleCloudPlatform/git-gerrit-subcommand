#!/usr/bin/env bash
# Copyright 2022 Google LLC
# Author: Jun Sheng
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This is the  git-gerrit tool.
#
set -o errexit
set -o nounset
usage () {
  cat <<EOF
git gerrit [start-work|submit]

The following configs are used:
   gerrit.remoteName
     The name of the remote pointing to the gerrit server, default is 'gerrit'.
     You can set this config by running:
         git config --add gerrit.remoteName  my-gerrit-remote

   gerrit.remoteRef
     The ref which review will happen, default is 'refs/for/main'.
     You can set this config by running:
         git config --add gerrit.remoteRef  refs/for/main

   gerrit.defaultBranch
     The branch which approved changesets will merge into, default is the right most part of your gerrit.remoteRef splitted by "/", 
     for instance, if your gerrit.remoteRef is 'refs/for/main', then gerrit.defaultBranch defaults to 'main'
     You can set this config by running:
         git config --add gerrit.defaultBranch  main

EOF
  exit 1
}

GERRIT_REMOTE="$(git config --get --default gerrit gerrit.remoteName)"
GERRIT_REMOTEREF="$(git config --get --default refs/for/main gerrit.remoteRef)"
GERRIT_DEFAULTBRANCH="$(git config --get --default "${GERRIT_REMOTEREF##*/}" gerrit.defaultBranch)"

startwork() {
  BRANCH=$(git branch --show-current)
  if [ "$BRANCH" = "$GERRIT_DEFAULTBRANCH" ]
  then
    echo "Starting from default branch '$GERRIT_DEFAULTBRANCH'"
  elif echo "$BRANCH"|grep -q '^I[0-9a-f]\{40\}\.c\.[a-z0-9-]*$'
  then
    echo "Starting from submitted change: '$BRANCH'"
  else
    echo "Must start from default branch '$GERRIT_DEFAULTBRANCH' or a submitted change."
    exit 1
  fi
  ID=I$(dd if=/dev/urandom count=1 2>/dev/null|git hash-object --stdin)
  if git rev-list -n 1 "$GERRIT_DEFAULTBRANCH" 2>/dev/null
  then
    git checkout -b $ID
  else
    git checkout --orphan $ID
  fi
}
presubmitcheck() {
  ID=$1
  if ! (echo $ID|grep -q '^I[0-9a-f]\{40\}$')
  then
    echo "Not in gerrit working branch" >&2
    return 1
  fi
  if ! (output=$(git status --untracked-files=no --porcelain) && [ -z "$output" ])
  then
    echo "Workspace not clean, commit changes(or stash them) then submit" >&2
    return 1
  fi
  if git log --format=%B -n 1 HEAD|grep -q Change-Id
  then
    if [ "$FORCE_RESUBMIT" -eq 0 ]
    then
      echo "Seems workspace has already been submitted" >&2
      return 1
    fi
    return 0
  fi
}
resume_submitcheck() {
  ID=$1
  if ! (echo $ID|grep -q '^I[0-9a-f]\{40\}\.submit$')
  then
    return 1
  fi
  echo "Resume submitting..."
}
guess_submit_message() {
  echo "## Input your commit message for submission."
  echo ""
  echo "## Commit history since start-work:"
  if git rev-list -n 1 "$GERRIT_DEFAULTBRANCH" 1>/dev/null 2>&1
  then
    git log --format="# %s" ${GERRIT_DEFAULTBRANCH}..
  else
    git log --format="# %s"
  fi
  echo ""
  echo "## Don't change lines below, including the empty line:"
  echo
  echo "Change-Id: $1"
}
find_start_point () {
  ID="$1"
  if git rev-list -n 1 "$GERRIT_DEFAULTBRANCH" 1>/dev/null 2>&1
  then
    (git log $(git merge-base "$GERRIT_DEFAULTBRANCH" "$ID").."$ID" --format="%H %(trailers:key=Change-Id,valueonly,separator=)" --grep="^Change-Id:"
    git merge-base "$GERRIT_DEFAULTBRANCH" "$ID")|grep -v "$ID"|head -n 1|cut -d " " -f 1
  else
    git log --format="%H %(trailers:key=Change-Id,valueonly,separator=)" --grep="^Change-Id:"|grep -v "$ID"|head -n 1|cut -d " " -f 1
  fi
}

submitwork() {
  FORCE_RESUBMIT=0
  while getopts f flag
  do
    case "$flag" in
      f) FORCE_RESUBMIT=1
         ;;
      ?) exit 1;;
    esac
  done
  ID=$(git branch --show-current)
  if presubmitcheck "$ID"
  then
    START_POINT="$(find_start_point $ID)"
    if [ -n "$START_POINT" ]
    then
      WORKCOMMIT="$(git log $(find_start_point $ID)..HEAD --format=%H --grep "^Change-Id: $ID" -n 1)"
    else
      WORKCOMMIT="$(git log --format=%H --grep "^Change-Id: $ID" -n 1)"
    fi
    if [ -z $WORKCOMMIT ]
    then
      TMPFILE="$(mktemp /tmp/git-gerrit-XXXXXX)"
      guess_submit_message "$ID" > "${TMPFILE}"
      trap "rm -f '$TMPFILE'" EXIT
      git commit -t "${TMPFILE}" --allow-empty
    else
      git commit -C "$WORKCOMMIT" --allow-empty
    fi

    if [ -n "$START_POINT" ]
    then
      git checkout "$START_POINT"
      git checkout -b ${ID}.submit
      git merge --squash $ID
    else
      git checkout --orphan ${ID}.submit
    fi
    if git commit -C $ID
    then
      git push "${GERRIT_REMOTE}" ${ID}.submit:"${GERRIT_REMOTEREF}"
    fi
    git checkout ${ID}
    git branch -m ${ID}.submit ${ID}.c.unknown
  elif resume_submitcheck "$ID"
  then
    git push "${GERRIT_REMOTE}" ${ID}:"${GERRIT_REMOTEREF}"
    git checkout ${ID/.submit/}
    git branch -m $ID ${ID/.submit/}.c.unknown
  fi
}

gerrit_status () {
  if git rev-list -n 1 "$GERRIT_DEFAULTBRANCH" 1>/dev/null 2>&1
  then
    git log ${GERRIT_DEFAULTBRANCH}.. --oneline
    git log -n 1 --oneline ${GERRIT_DEFAULTBRANCH}
  else
    git log --oneline
  fi
}

gerrit_pull () {
  git fetch "$GERRIT_REMOTE" refs/changes/*:refs/remotes/"$GERRIT_REMOTE"/changes/*
  git fetch -u "$GERRIT_REMOTE" "$GERRIT_DEFAULTBRANCH":"$GERRIT_DEFAULTBRANCH"
  TMPFILE_1=$(mktemp /tmp/git-gerrit-pull-XXXXXX)
  trap "rm -f '$TMPFILE_1'" EXIT
  git branch --format "%(objectname) %(refname:lstrip=-1)" --list I[[:xdigit:]]*  > "$TMPFILE_1"
  shopt -s extglob
  cat "$TMPFILE_1" | while read COMMIT BNAME;
  do
    if echo "$BNAME"|grep -q "^I[[:xdigit:]]\+$"
    then
        if git log "$GERRIT_DEFAULTBRANCH" -n 1 --grep "Change-Id: $BNAME" |grep -q "$BNAME"
        then
          git branch -m "$BNAME" "$BNAME".merged
        fi
    elif echo "$BNAME"|grep -q "^I[[:xdigit:]]\+\.c\.unknown$"
    then
      git branch -r --contains $COMMIT --format "%(refname:lstrip=-2) %(refname:rstrip=-4)" |sed -n 's,/,-,g; /changes$/ s/ .*$//p' |(
          while read cid; do git branch -m $BNAME ${BNAME/unknown/$cid};done)
    fi
done
}

case ${1:-help} in
  start-work)
    startwork
    ;;
  submit)
    shift
    submitwork "$@" && gerrit_pull
    ;;
  whereami)
    gerrit_status
    ;;
  find_start)
    shift
    find_start_point $(git branch --show-current)
    ;;
  pull)
    gerrit_pull
    ;;
  *)
    usage
    ;;
esac
